# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2017-12-27 15:00
from __future__ import unicode_literals

import bluebottle.utils.fields
from decimal import Decimal
import datetime
from django.db import models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import django_summernote.settings
import djmoney.models.fields
import localflavor.generic.models
import select_multiple_field.models
import sorl.thumbnail.fields
import taggit.managers
import binascii
import os
from django.db import migrations, connection
from django.db.models import Value
from django.db.models.functions import Concat, Substr
from django.conf import settings
from django.utils._os import safe_join
from django.contrib.auth.models import Permission, Group
from bluebottle.utils.utils import update_group_permissions
from bluebottle.clients import properties
from django.db.models import DecimalField


class MoneyField(DecimalField):
    """
    Deprecated MoneyField
    """
    def __init__(self, *args, **kwargs):
        """ Set defaults to 2 decimal places and 12 digits. """
        kwargs['max_digits'] = kwargs.get('max_digits', 12)
        kwargs['decimal_places'] = kwargs.get('decimal_places', 2)
        super(MoneyField, self).__init__(*args, **kwargs)


def fix_budget_line_amounts(apps, schema_editor):
    ProjectBudgetLine = apps.get_model('projects', 'ProjectBudgetLine')

    ProjectBudgetLine.objects.all().update(amount=F('amount') / 100)


def generate_key():
    return binascii.hexlify(os.urandom(20)).decode()


def create_auth_token(apps, schema_editor):
    Member = apps.get_model('members', 'member')
    Token = apps.get_model('authtoken', 'token')

    member = Member.objects.create(
        email='devteam+accounting@onepercentclub.com',
        username='accounting'
    )

    token = Token.objects.create(
        user=member,
        key=generate_key()
    )


def correct_needs_approval_status(apps, schema_editor):
    Project = apps.get_model('projects', 'Project')
    ProjectPayout = apps.get_model('payouts', 'ProjectPayout')

    for project in Project.objects.filter(payout_status='needs_approval'):
        try:
            if project.projectpayout_set.get().status in ('in_progress', 'settled'):
                project.payout_status = None
                project.save()
        except ProjectPayout.DoesNotExist:
            pass


def add_phaselogs_to_old_projects(apps, schema_editor):
    Project = apps.get_model('projects', 'Project')
    ProjectPhaseLog = apps.get_model('projects', 'ProjectPhaseLog')

    for project in Project.objects.filter(projectphaselog__isnull=True):
        log = ProjectPhaseLog.objects.create(project=project, status=project.status, start=project.deadline)
        log.save()


def fix_documents(apps, schema_editor):
    ProjectDocument = apps.get_model('projects', 'ProjectDocument')

    ProjectDocument.objects.exclude(file='').update(
        file=Concat(Value('private/'), 'file')
    )
    root = safe_join(
        settings.TENANT_BASE,
        connection.tenant.schema_name
    )

    old_dir = safe_join(root, 'projects/documents')
    new_dir = safe_join(root, 'private/projects/documents')

    if not os.path.exists(old_dir):
        return

    if not os.path.exists(new_dir):
        os.makedirs(new_dir)

    os.rename(old_dir, new_dir)


def rewind_fix_documents(apps, schema_editor):
    ProjectDocument = apps.get_model('projects', 'ProjectDocument')

    ProjectDocument.objects.filter(file__isnull=False).update(
        file=Substr('file', 9)
    )
    root = safe_join(
        settings.TENANT_BASE,
        connection.tenant.schema_name
    )

    old_dir = safe_join(root, 'private/projects/documents')
    new_dir = safe_join(root, 'projects/documents')

    if not os.path.exists(new_dir):
        os.makedirs(new_dir)

    os.rename(old_dir, new_dir)


def fix_phaselog_for_incorrect_project_statuses(apps, schema_editor):
    """
    #BB-9886 : Fix to add a new project phase status logs for projects whose status does not correspond to the last
    project phase status log. We have to fake a timestamp as we dont know when the status was really updated.
    """
    Project = apps.get_model('projects', 'Project')
    ProjectPhaseLog = apps.get_model('projects', 'ProjectPhaseLog')

    for project in Project.objects.all():
        last_project_phase_log = ProjectPhaseLog.objects.filter(project=project).order_by('start').last()
        if project.status != last_project_phase_log.status:
            start = last_project_phase_log.start + datetime.timedelta(minutes = 1)
            log = ProjectPhaseLog.objects.create(project=project, status=project.status, start=start)
            log.save()


def fix_log_migration(apps, schema_editor):

    with connection.cursor() as cursor:
        cursor.execute("SELECT applied FROM django_migrations WHERE name='0010_fix_export_permissions_migration'")
        start_date = cursor.fetchone()[0]
        cursor.execute("SELECT applied FROM django_migrations WHERE name='0027_auto_20170602_2240'")
        end_date = cursor.fetchone()[0]

    ProjectPhaseLog = apps.get_model('projects', 'ProjectPhaseLog')

    for status_log in ProjectPhaseLog.objects.filter(start__range=(start_date, end_date)):
        new_date = status_log.project.deadline if status_log.project.deadline else status_log.project.created
        ProjectPhaseLog.objects.filter(id=status_log.id).update(start=new_date)


def add_group_permissions(apps, schema_editor):
    group_perms = {
        'Staff': {
            'perms': (
                'add_project', 'change_project', 'delete_project',
                'add_projectdocument', 'change_projectdocument', 'delete_projectdocument',
                'add_projectbudgetline', 'change_projectbudgetline', 'delete_projectbudgetline',
            )
        },
        'Anonymous': {
            'perms': ('api_read_project',)
        },
        'Authenticated': {
            'perms': ('api_read_project', 'api_add_project', 'api_change_project',
                      'api_read_projectdocument', 'api_add_projectdocument', 'api_change_projectdocument',
                      'api_read_projectbudgetline', 'api_add_projectbudgetline',
                      'api_change_projectbudgetline', 'api_delete_projectbudgetline',)
        }
    }

    update_group_permissions('projects', group_perms, apps)


def set_task_manager_to_owner(apps, schema_editor):
    Project = apps.get_model('projects', 'project')
    Project.objects.update(task_manager=F('owner'))


def set_owner_permissions(apps, schema_editor):
    group_perms = {
        'Staff': {
            'perms': (
                'api_read_projectdocument',
            )
        },
        'Authenticated': {
            'perms': (
                'api_change_own_project', 'api_add_own_project',
                'api_read_own_project',
                'api_add_own_projectdocument', 'api_read_own_projectdocument',
                'api_change_own_projectdocument',
                'api_add_own_projectbudgetline', 'api_read_own_projectbudgetline',
                'api_change_own_projectbudgetline', 'api_delete_own_projectbudgetline',
            )
        }
    }

    update_group_permissions('projects', group_perms, apps)

    authenticated = Group.objects.get(name='Authenticated')
    for perm in (
        'api_change_project', 'api_delete_project', 'api_change_projectbudgetline',
        'api_read_projectdocument', 'api_change_projectdocument', 'api_delete_projectbudgetline',
        ):
        authenticated.permissions.remove(
            Permission.objects.get(
                codename=perm, content_type__app_label='projects'
            )
        )

def add_group_permissions_projectimage(apps, schema_editor):
    group_perms = {
        'Anonymous': {
            'perms': ('api_read_projectimage',)
        },
        'Authenticated': {
            'perms': (
                'api_read_projectimage', 'api_add_own_projectimage',
                'api_change_own_projectimage', 'api_delete_own_projectimage',
            )
        }
    }

    update_group_permissions('projects', group_perms, apps)


def fix_payout_status(apps, schema_editor):
    Project = apps.get_model('projects', 'Project')
    Project.objects.filter(amount_asked=0, payout_status__isnull=False).update(payout_status=None)


def add_group_permissions_projectdocument(apps, schema_editor):
    group_perms = {
        'Authenticated': {
            'perms': (
                'api_delete_own_projectdocument',
            )
        }
    }

    update_group_permissions('projects', group_perms, apps)


def migrate_project_settings(apps, schema_editor):
    ProjectPlatformSettings = apps.get_model('projects', 'ProjectPlatformSettings')
    ProjectSearchFilter = apps.get_model('projects', 'ProjectSearchFilter')
    Client = apps.get_model('clients', 'Client')

    project_settings, _ = ProjectPlatformSettings.objects.get_or_create()

    tenant = Client.objects.get(schema_name=connection.tenant.schema_name)
    properties.set_tenant(tenant)

    project_settings.create_types = properties.PROJECT_CREATE_TYPES
    project_settings.create_flow = properties.PROJECT_CREATE_FLOW
    project_settings.contact_method = properties.PROJECT_CONTACT_METHOD
    project_settings.contact_types = properties.PROJECT_CONTACT_TYPES

    # Remove all filters
    ProjectSearchFilter.objects.all().delete()

    for filt in properties.SEARCH_OPTIONS['filters']['projects']:
        project_filter = ProjectSearchFilter.objects.create(
            project_settings=project_settings,
            name=filt['name']
        )
        for k,v in filt.items():
            if filt['name'] == 'type' and k == 'values':
                v = ",".join(v)
            setattr(project_filter, k, v)
        project_filter.save()

    project_settings.save()


def dummy(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    replaces = [(b'projects', '0001_initial'), (b'projects', '0002_remove_project_tags'), (b'projects', '0003_auto_20160610_1554'), (b'projects', '0004_projectdocument_ip_address'), (b'projects', '0005_auto_20160720_1140'), (b'projects', '0006_project_celebrate_results'), (b'projects', '0007_auto_20160929_0817'), (b'projects', '0005_auto_20160721_1546'), (b'projects', '0006_merge'), (b'projects', '0008_merge'), (b'projects', '0008_fix_project_type'), (b'projects', '0009_merge'), (b'projects', '0007_remove_projectbudgetline_currency'), (b'projects', '0007_project_currencies'), (b'projects', '0010_merge'), (b'projects', '0011_auto_20161006_1149'), (b'projects', '0010_auto_20161019_1403'), (b'projects', '0012_merge'), (b'projects', '0011_auto_20161028_0946'), (b'projects', '0013_merge'), (b'projects', '0014_auto_20161109_1041'), (b'projects', '0015_project_payout_status'), (b'projects', '0016_project_campaign_payed_out'), (b'projects', '0017_auto_20161121_1053'), (b'projects', '0014_auto_20161115_1601'), (b'projects', '0015_auto_20161207_0900'), (b'projects', '0018_merge_20170106_1627'), (b'projects', '0019_auto_20170106_1657'), (b'projects', '0020_merge_20170124_1338'), (b'projects', '0018_merge_20170118_1533'), (b'projects', '0019_auto_20170118_1537'), (b'projects', '0021_merge_20170202_1154'), (b'projects', '0022_project_reviewer'), (b'projects', '0023_auto_20170323_1227'), (b'projects', '0024_auto_20170404_1130'), (b'projects', '0025_auto_20170404_1130'), (b'projects', '0026_auto_20170424_1653'), (b'projects', '0027_auto_20170602_2240'), (b'projects', '0028_auto_20170619_1555'), (b'projects', '0027_auto_20170523_1422'), (b'projects', '0028_auto_20170523_1422'), (b'projects', '0029_merge_20170628_0905'), (b'projects', '0030_rename_account_bic_20170705_1221'), (b'projects', '0031_add_project_roles'), (b'projects', '0032_default_task_manager'), (b'projects', '0031_add_api_permissions'), (b'projects', '0032_add_group_permissions'), (b'projects', '0033_merge_20170818_1333'), (b'projects', '0034_auto_20170822_1303'), (b'projects', '0035_set_owner_permissions'), (b'projects', '0031_fix_migration_projectstatuslog_creation_20170721_1637'), (b'projects', '0036_merge_20170831_1449'), (b'projects', '0037_auto_20170915_1350'), (b'projects', '0038_auto_20170915_1358'), (b'projects', '0039_add_project_image_group_permissions'), (b'projects', '0040_auto_20170918_1200'), (b'projects', '0041_auto_20170918_1201'), (b'projects', '0037_longer_place_20170914_1129'), (b'projects', '0038_longer_account_details_20170914_1134'), (b'projects', '0039_auto_20170914_1503'), (b'projects', '0042_merge_20170920_1332'), (b'projects', '0043_auto_20171023_1958'), (b'projects', '0044_auto_20171023_2008'), (b'projects', '0045_auto_20171023_2013'), (b'projects', '0046_auto_20171023_2047'), (b'projects', '0047_auto_20171024_1016'), (b'projects', '0048_auto_20171024_1052'), (b'projects', '0049_auto_20171024_1018'), (b'projects', '0043_remove_payout_status_sourcing_projects'), (b'projects', '0050_merge_20171110_1633'), (b'projects', '0044_auto_20171110_1549'), (b'projects', '0045_auto_20171114_1058'), (b'projects', '0051_merge_20171115_1702'), (b'projects', '0051_auto_20171113_1637'), (b'projects', '0052_merge_20171122_1000'), (b'projects', '0052_merge_20171121_1335'), (b'projects', '0053_merge_20171122_1001'), (b'projects', '0050_merge_20171124_0022'), (b'projects', '0054_merge_20171128_1142'), (b'projects', '0043_auto_20171025_1253'), (b'projects', '0050_merge_20171113_1230'), (b'projects', '0051_merge_20171124_0021'), (b'projects', '0052_merge_20171127_1329'), (b'projects', '0055_merge_20171205_0847'), (b'projects', '0056_auto_20171205_0847'), (b'projects', '0055_merge_20171201_1608'), (b'projects', '0057_merge_20171205_1236'), (b'projects', '0054_auto_20171122_1415'), (b'projects', '0055_project_campaign_edited'), (b'projects', '0058_merge_20171220_1342')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bb_projects', '0001_initial'),
        ('categories', '0001_initial'),
        ('members', '0010_fix_export_permissions_migration'),
        ('geo', '0001_initial'),
        ('utils', '0001_initial'),
        ('members', '0008_merge_20170106_1627'),
        ('taggit', '0002_auto_20150616_2121'),
        ('organizations', '0001_initial'),
        ('tasks', '0015_merge'),
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_type', models.CharField(blank=True, choices=[(b'sourcing', 'Crowd-sourcing'), (b'funding', 'Crowd-funding'), (b'both', 'Crowd-funding & Crowd-sourcing')], max_length=50, null=True, verbose_name='Project type')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, help_text='When this project was created.', verbose_name='created')),
                ('updated', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='updated')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='title')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
                ('pitch', models.TextField(blank=True, help_text='Pitch your smart idea in one sentence', verbose_name='pitch')),
                ('favorite', models.BooleanField(default=True)),
                ('deadline', models.DateTimeField(blank=True, null=True, verbose_name='deadline')),
                ('place', models.CharField(blank=True, help_text='Geographical location', max_length=100, null=True)),
                ('description', models.TextField(blank=True, help_text='Blow us away with the details!', verbose_name='why, what and how')),
                ('image', sorl.thumbnail.fields.ImageField(blank=True, help_text='Main project picture', max_length=255, upload_to=b'project_images/', verbose_name='image')),
                ('amount_asked', MoneyField(blank=True, decimal_places=2, default=0, max_digits=12, null=True)),
                ('amount_donated', MoneyField(decimal_places=2, default=0, max_digits=12)),
                ('amount_needed', MoneyField(decimal_places=2, default=0, max_digits=12)),
                ('amount_extra', MoneyField(blank=True, decimal_places=2, default=0, help_text='Amount pledged by organisation (matching fund).', max_digits=12, null=True)),
                ('account_holder_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='account holder name')),
                ('account_holder_address', models.CharField(blank=True, max_length=255, null=True, verbose_name='account holder address')),
                ('account_holder_postal_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='account holder postal code')),
                ('account_holder_city', models.CharField(blank=True, max_length=255, null=True, verbose_name='account holder city')),
                ('account_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Account number')),
                ('account_bic', localflavor.generic.models.BICField(blank=True, max_length=11, null=True, verbose_name='account SWIFT-BIC')),
                ('latitude', models.DecimalField(blank=True, decimal_places=18, max_digits=21, null=True, verbose_name='latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=18, max_digits=21, null=True, verbose_name='longitude')),
                ('reach', models.PositiveIntegerField(blank=True, help_text='How many people do you expect to reach?', null=True, verbose_name='Reach')),
                ('video_url', models.URLField(blank=True, default=b'', help_text="Do you have a video pitch or a short movie that explains your project? Cool! We can't wait to see it! You can paste the link to YouTube or Vimeo video here", max_length=100, null=True, verbose_name='video')),
                ('popularity', models.FloatField(default=0)),
                ('is_campaign', models.BooleanField(default=False, help_text='Project is part of a campaign and gets special promotion.')),
                ('skip_monthly', models.BooleanField(default=False, help_text='Skip this project when running monthly donations', verbose_name='Skip monthly')),
                ('allow_overfunding', models.BooleanField(default=True)),
                ('story', models.TextField(blank=True, help_text='This is the help text for the story field', null=True, verbose_name='story')),
                ('effects', models.TextField(blank=True, help_text='What will be the Impact? How will your Smart Idea change the lives of people?', null=True, verbose_name='effects')),
                ('for_who', models.TextField(blank=True, help_text='Describe your target group', null=True, verbose_name='for who')),
                ('future', models.TextField(blank=True, help_text='How will this project be self-sufficient and sustainable in the long term?', null=True, verbose_name='future')),
                ('date_submitted', models.DateTimeField(blank=True, null=True, verbose_name='Campaign Submitted')),
                ('campaign_started', models.DateTimeField(blank=True, null=True, verbose_name='Campaign Started')),
                ('campaign_ended', models.DateTimeField(blank=True, null=True, verbose_name='Campaign Ended')),
                ('campaign_funded', models.DateTimeField(blank=True, null=True, verbose_name='Campaign Funded')),
                ('voting_deadline', models.DateTimeField(blank=True, null=True, verbose_name='Voting Deadline')),
                ('account_bank_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_account_bank_country', to='geo.Country')),
                ('account_holder_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_account_holder_country', to='geo.Country')),
                ('categories', models.ManyToManyField(blank=True, to=b'categories.Category')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='geo.Country')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='utils.Language')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='geo.Location')),
                ('organization', models.ForeignKey(blank=True, help_text='Project organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organization', to='organizations.Organization', verbose_name='organization')),
                ('owner', models.ForeignKey(help_text='Campaigner', on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL, verbose_name='campaigner')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bb_projects.ProjectPhase')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Add tags', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bb_projects.ProjectTheme')),
            ],
            options={
                'ordering': ['title'],
                'abstract': False,
                'verbose_name': 'campaign',
                'verbose_name_plural': 'projects',
            },
        ),
        migrations.CreateModel(
            name='ProjectBudgetLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(default=b'', max_length=255, verbose_name='description')),
                ('currency', models.CharField(default=b'EUR', max_length=3)),
                ('amount', bluebottle.utils.fields.MoneyField(currency_choices=[(b'EUR', b'Euro')], decimal_places=2, default=Decimal('0.0'), max_digits=12)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True)),
                ('updated', django_extensions.db.fields.ModificationDateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.Project')),
                ('amount_currency', djmoney.models.fields.CurrencyField(choices=[(b'EUR', b'Euro')], default=b'EUR', editable=False, max_length=3)),
            ],
            options={
                'verbose_name': 'budget line',
                'verbose_name_plural': 'budget lines',
            },
        ),
        migrations.CreateModel(
            name='ProjectDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=b'projects/documents')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, null=True, verbose_name='deleted')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='projects.Project')),
                ('ip_address', models.GenericIPAddressField(blank=True, default=None, null=True, verbose_name='IP address')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'project document',
                'verbose_name_plural': 'project documents',
            },
        ),
        migrations.CreateModel(
            name='ProjectPhaseLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, help_text='When this project entered in this status.', verbose_name='created')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.Project')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bb_projects.ProjectPhase')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='project',
            name='tags',
        ),
        migrations.AlterField(
            model_name='project',
            name='is_campaign',
            field=models.BooleanField(default=False, help_text='Project is part of a campaign and gets special promotion.', verbose_name=b'On homepage'),
        ),
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ['title'], 'verbose_name': 'project', 'verbose_name_plural': 'projects'},
        ),
        migrations.AlterField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(help_text='Project owner', on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL, verbose_name='initiator'),
        ),
        migrations.AddField(
            model_name='project',
            name='celebrate_results',
            field=models.BooleanField(default=True, help_text='Show celebration when project is complete', verbose_name='Celebrate Results'),
        ),
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ['title'], 'verbose_name': 'project', 'verbose_name_plural': 'projects'},
        ),
        migrations.AddField(
            model_name='project',
            name='amount_asked_currency',
            field=djmoney.models.fields.CurrencyField(choices=[(b'EUR', b'Euro')], default=b'EUR', editable=False, max_length=3),
        ),
        migrations.AddField(
            model_name='project',
            name='amount_donated_currency',
            field=djmoney.models.fields.CurrencyField(choices=[(b'EUR', b'Euro')], default=b'EUR', editable=False, max_length=3),
        ),
        migrations.AddField(
            model_name='project',
            name='amount_extra_currency',
            field=djmoney.models.fields.CurrencyField(choices=[(b'EUR', b'Euro')], default=b'EUR', editable=False, max_length=3),
        ),
        migrations.AddField(
            model_name='project',
            name='amount_needed_currency',
            field=djmoney.models.fields.CurrencyField(choices=[(b'EUR', b'Euro')], default=b'EUR', editable=False, max_length=3),
        ),
        migrations.AlterField(
            model_name='project',
            name='amount_asked',
            field=bluebottle.utils.fields.MoneyField(currency_choices=[(b'EUR', b'Euro')], decimal_places=2, default=Decimal('0'), max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='amount_donated',
            field=bluebottle.utils.fields.MoneyField(currency_choices=[(b'EUR', b'Euro')], decimal_places=2, default=Decimal('0'), max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='amount_extra',
            field=bluebottle.utils.fields.MoneyField(currency_choices=[(b'EUR', b'Euro')], decimal_places=2, default=Decimal('0'), help_text='Amount pledged by organisation (matching fund).', max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='amount_needed',
            field=bluebottle.utils.fields.MoneyField(currency_choices=[(b'EUR', b'Euro')], decimal_places=2, default=Decimal('0'), max_digits=12, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(help_text='Project owner', on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL, verbose_name='initiator'),
        ),
        migrations.RunSQL(
            sql="\n    UPDATE projects_project SET project_type = project_types.calculated_type\n    FROM (\n        SELECT p.id, CASE \n            WHEN (p.amount_asked > 0 AND count(t.id) > 0) THEN 'both'\n            WHEN count(t.id) > 0 THEN 'sourcing' \n            WHEN p.amount_asked > 0 THEN 'funding' \n            ELSE p.project_type END as calculated_type\n        FROM projects_project as p\n        LEFT JOIN tasks_task as t\n        ON t.project_id = p.id\n        GROUP BY p.id, p.amount_asked, p.project_type) project_types\n    WHERE projects_project.id = project_types.id\n    AND (projects_project.project_type IS NULL \n    OR projects_project.project_type = '');\n    ",
        ),
        migrations.RemoveField(
            model_name='projectbudgetline',
            name='currency',
        ),
        migrations.AddField(
            model_name='project',
            name='currencies',
            field=select_multiple_field.models.SelectMultipleField(choices=[(b'EUR', b'Euro')], max_length=100, null=True),
        ),
        migrations.RunPython(
            code=fix_budget_line_amounts,
        ),
        migrations.RunSQL(
            sql='SET CONSTRAINTS ALL IMMEDIATE',
            reverse_sql='',
        ),
        migrations.AlterField(
            model_name='project',
            name='amount_asked',
            field=bluebottle.utils.fields.MoneyField(currency_choices=[(b'EUR', b'Euro')], decimal_places=2, default=Decimal('0'), max_digits=12),
        ),
        migrations.AlterField(
            model_name='project',
            name='amount_donated',
            field=bluebottle.utils.fields.MoneyField(currency_choices=[(b'EUR', b'Euro')], decimal_places=2, default=Decimal('0'), max_digits=12),
        ),
        migrations.AlterField(
            model_name='project',
            name='amount_extra',
            field=bluebottle.utils.fields.MoneyField(currency_choices=[(b'EUR', b'Euro')], decimal_places=2, default=Decimal('0'), help_text='Amount pledged by organisation (matching fund).', max_digits=12),
        ),
        migrations.AlterField(
            model_name='project',
            name='amount_needed',
            field=bluebottle.utils.fields.MoneyField(currency_choices=[(b'EUR', b'Euro')], decimal_places=2, default=Decimal('0'), max_digits=12),
        ),
        migrations.AlterField(
            model_name='project',
            name='currencies',
            field=select_multiple_field.models.SelectMultipleField(choices=[(b'EUR', 'Euro')], default=[], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='payout_status',
            field=models.CharField(blank=True, choices=[(b'needs_approval', 'Needs approval'), (b'approved', 'Approved'), (b'created', 'Created'), (b'in_progress', 'In progress'), (b'partial', 'Partial'), (b'success', 'Success'), (b'failed', 'Failed')], max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='campaign_payed_out',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Campaign Payed Out'),
        ),
        migrations.AlterField(
            model_name='project',
            name='currencies',
            field=select_multiple_field.models.SelectMultipleField(choices=[(b'EUR', 'Euro')], default=[], max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='currencies',
            field=select_multiple_field.models.SelectMultipleField(choices=[(b'EUR', 'Euro')], default=[], max_length=100),
        ),
        migrations.AlterField(
            model_name='project',
            name='currencies',
            field=select_multiple_field.models.SelectMultipleField(choices=[(b'EUR', 'Euro')], default=[], max_length=100),
        ),
        migrations.RunPython(
            code=create_auth_token,
        ),
        migrations.AddField(
            model_name='project',
            name='reviewer',
            field=models.ForeignKey(blank=True, help_text='Project Reviewer', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewer', to=settings.AUTH_USER_MODEL, verbose_name='reviewer'),
        ),
        migrations.AlterField(
            model_name='project',
            name='created',
            field=models.DateTimeField(auto_now_add=True, help_text='When this project was created.', verbose_name='created'),
        ),
        migrations.AlterField(
            model_name='project',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='Project organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='organizations.Organization', verbose_name='organization'),
        ),
        migrations.AlterField(
            model_name='project',
            name='updated',
            field=models.DateTimeField(auto_now=True, verbose_name='updated'),
        ),
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ['title'], 'permissions': (('approve_payout', 'Can approve payouts for projects'),), 'verbose_name': 'project', 'verbose_name_plural': 'projects'},
        ),
        migrations.RenameField(
            model_name='project',
            old_name='campaign_payed_out',
            new_name='campaign_paid_out',
        ),
        migrations.AlterField(
            model_name='project',
            name='payout_status',
            field=models.CharField(blank=True, choices=[(b'needs_approval', 'Needs approval'), (b'approved', 'Approved'), (b'scheduled', 'Scheduled'), (b're_scheduled', 'Re-scheduled'), (b'in_progress', 'In progress'), (b'partial', 'Partially paid'), (b'success', 'Success'), (b'failed', 'Failed')], max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='campaign_paid_out',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Campaign Paid Out'),
        ),
        migrations.RunPython(
            code=correct_needs_approval_status,
        ),
        migrations.RunPython(
            code=add_phaselogs_to_old_projects,
            reverse_code=dummy,
        ),
        migrations.RunPython(
            code=fix_phaselog_for_incorrect_project_statuses,
            reverse_code=dummy,
        ),
        migrations.AlterField(
            model_name='projectdocument',
            name='file',
            field=bluebottle.utils.fields.PrivateFileField(max_length=110, upload_to=b'private/private/private/projects/documents'),
        ),
        migrations.RunPython(
            code=fix_documents,
            reverse_code=rewind_fix_documents,
        ),
        migrations.RenameField(
            model_name='Project',
            old_name='account_bic',
            new_name='account_details',
        ),
        migrations.AlterField(
            model_name='Project',
            name='account_details',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='promoter',
            field=models.ForeignKey(blank=True, help_text='Project Promoter', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='promoter', to=settings.AUTH_USER_MODEL, verbose_name='promoter'),
        ),
        migrations.AddField(
            model_name='project',
            name='task_manager',
            field=models.ForeignKey(blank=True, help_text='Project Task Manager', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_manager', to=settings.AUTH_USER_MODEL, verbose_name='task manager'),
        ),
        migrations.RunPython(
            code=set_task_manager_to_owner,
        ),
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ['title'], 'permissions': (('approve_payout', 'Can approve payouts for projects'), ('api_read_project', 'Can view projects through the API'), ('api_add_project', 'Can add projects through the API'), ('api_change_project', 'Can change projects through the API'), ('api_delete_project', 'Can delete projects through the API'), ('api_read_projectdocument', 'Can view project documents through the API'), ('api_add_projectdocument', 'Can add project documents through the API'), ('api_change_projectdocument', 'Can change project documents through the API'), ('api_delete_projectdocument', 'Can delete project documents through the API'), ('api_read_projectbudgetline', 'Can view project budget lines through the API'), ('api_add_projectbudgetline', 'Can add project budget lines through the API'), ('api_change_projectbudgetline', 'Can change project budget lines through the API'), ('api_delete_projectbudgetline', 'Can delete project budget lines through the API')), 'verbose_name': 'project', 'verbose_name_plural': 'projects'},
        ),
        migrations.AlterField(
            model_name='project',
            name='account_details',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='account details'),
        ),
        migrations.AlterField(
            model_name='projectdocument',
            name='file',
            field=bluebottle.utils.fields.PrivateFileField(max_length=110, upload_to=b'private/private/private/projects/documents'),
        ),
        migrations.RunPython(
            code=add_group_permissions,
        ),
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ['title'], 'permissions': (('approve_payout', 'Can approve payouts for projects'), ('api_read_project', 'Can view projects through the API'), ('api_add_project', 'Can add projects through the API'), ('api_change_project', 'Can change projects through the API'), ('api_delete_project', 'Can delete projects through the API'), ('api_read_own_project', 'Can view own projects through the API'), ('api_add_own_project', 'Can add own projects through the API'), ('api_change_own_project', 'Can change own projects through the API'), ('api_delete_own_project', 'Can delete own projects through the API'), ('api_read_projectdocument', 'Can view project documents through the API'), ('api_add_projectdocument', 'Can add project documents through the API'), ('api_change_projectdocument', 'Can change project documents through the API'), ('api_delete_projectdocument', 'Can delete project documents through the API'), ('api_read_own_projectdocument', 'Can view project own documents through the API'), ('api_add_own_projectdocument', 'Can add own project documents through the API'), ('api_change_own_projectdocument', 'Can change own project documents through the API'), ('api_delete_own_projectdocument', 'Can delete own project documents through the API'), ('api_read_projectbudgetline', 'Can view project budget lines through the API'), ('api_add_projectbudgetline', 'Can add project budget lines through the API'), ('api_change_projectbudgetline', 'Can change project budget lines through the API'), ('api_delete_projectbudgetline', 'Can delete project budget lines through the API'), ('api_read_own_projectbudgetline', 'Can view own project budget lines through the API'), ('api_add_own_projectbudgetline', 'Can add own project budget lines through the API'), ('api_change_own_projectbudgetline', 'Can change own project budget lines through the API'), ('api_delete_own_projectbudgetline', 'Can delete own project budget lines through the API')), 'verbose_name': 'project', 'verbose_name_plural': 'projects'},
        ),
        migrations.AlterField(
            model_name='projectdocument',
            name='file',
            field=bluebottle.utils.fields.PrivateFileField(max_length=110, upload_to=b'private/private/private/projects/documents'),
        ),
        migrations.RunPython(
            code=set_owner_permissions,
        ),
        migrations.RunPython(
            code=fix_log_migration,
            reverse_code=dummy
        ),
        migrations.CreateModel(
            name='ProjectImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', sorl.thumbnail.fields.ImageField(blank=True, help_text='Project image', max_length=255, upload_to=b'project_images/', verbose_name='image')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True)),
                ('updated', django_extensions.db.fields.ModificationDateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.Project')),
            ],
        ),
        migrations.AlterField(
            model_name='projectdocument',
            name='file',
            field=bluebottle.utils.fields.PrivateFileField(max_length=110, upload_to=b'private/private/private/projects/documents'),
        ),
        migrations.AlterModelOptions(
            name='projectimage',
            options={'permissions': (('api_read_projectimage', 'Can view project images through the API'), ('api_add_projectimage', 'Can add project images through the API'), ('api_change_projectimage', 'Can change project images through the API'), ('api_delete_projectimage', 'Can delete project images through the API'), ('api_read_own_projectimage', 'Can view own project images through the API'), ('api_add_own_projectimage', 'Can add own project images through the API'), ('api_change_own_projectimage', 'Can change own project images through the API'), ('api_delete_own_projectimage', 'Can delete own project images through the API')), 'verbose_name': 'project image', 'verbose_name_plural': 'project images'},
        ),
        migrations.AlterField(
            model_name='projectdocument',
            name='file',
            field=bluebottle.utils.fields.PrivateFileField(max_length=110, upload_to=b'private/private/private/projects/documents'),
        ),
        migrations.RunPython(
            code=add_group_permissions_projectimage,
        ),
        migrations.AlterModelOptions(
            name='projectimage',
            options={'permissions': (('api_read_projectimage', 'Can view project imagesthrough the API'), ('api_add_projectimage', 'Can add project images through the API'), ('api_change_projectimage', 'Can change project images through the API'), ('api_delete_projectimage', 'Can delete project images through the API'), ('api_read_own_projectimage', 'Can view own project images through the API'), ('api_add_own_projectimage', 'Can add own project images through the API'), ('api_change_own_projectimage', 'Can change own project images through the API'), ('api_delete_own_projectimage', 'Can delete own project images through the API')), 'verbose_name': 'project image', 'verbose_name_plural': 'project images'},
        ),
        migrations.AddField(
            model_name='projectimage',
            name='file',
            field=models.FileField(default=None, upload_to=django_summernote.settings.uploaded_filepath),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='projectimage',
            name='name',
            field=models.CharField(blank=True, help_text=b'Defaults to filename, if left blank', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='projectimage',
            name='uploaded',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='project',
            name='story',
            field=models.TextField(blank=True, help_text='Describe the project in detail', null=True, verbose_name='story'),
        ),
        migrations.AlterField(
            model_name='projectdocument',
            name='file',
            field=bluebottle.utils.fields.PrivateFileField(max_length=110, upload_to=b'private/private/private/projects/documents'),
        ),
        migrations.RemoveField(
            model_name='projectimage',
            name='created',
        ),
        migrations.RemoveField(
            model_name='projectimage',
            name='image',
        ),
        migrations.RemoveField(
            model_name='projectimage',
            name='updated',
        ),
        migrations.AlterField(
            model_name='projectdocument',
            name='file',
            field=bluebottle.utils.fields.PrivateFileField(max_length=110, upload_to=b'private/private/private/projects/documents'),
        ),
        migrations.AlterField(
            model_name='project',
            name='place',
            field=models.CharField(blank=True, help_text='Geographical location', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='account_details',
            field=models.CharField(blank=True, max_length=500, null=True, verbose_name='account details'),
        ),
        migrations.AlterField(
            model_name='project',
            name='title',
            field=models.CharField(db_index=True, max_length=255, unique=True, verbose_name='title'),
        ),
        migrations.CreateModel(
            name='ProjectPlatformSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update', models.DateTimeField(auto_now=True)),
                ('create_types', select_multiple_field.models.SelectMultipleField(choices=[(b'sourcing', 'Sourcing'), (b'funding', 'Funding')], max_length=100)),
                ('create_flow', models.CharField(choices=[(b'combined', 'Combined'), (b'choice', 'Choice')], max_length=100)),
                ('contact_method', models.CharField(choices=[(b'mail', 'E-mail'), (b'phone', 'Phone')], max_length=100)),
                ('contact_types', select_multiple_field.models.SelectMultipleField(choices=[(b'organization', 'Organization'), (b'personal', 'Personal')], default=['organization'], max_length=100)),
            ],
            options={
                'verbose_name': 'Project Settings',
                'verbose_name_plural': 'Project Settings',
            },
        ),
        migrations.CreateModel(
            name='ProjectSearchFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[(b'location', 'Location'), (b'theme', 'Theme'), (b'skill', 'Skill'), (b'date', 'Date'), (b'status', 'Status'), (b'type', 'Type')], max_length=100)),
                ('default', models.CharField(blank=True, max_length=100, null=True)),
                ('values', models.CharField(blank=True, help_text='Comma separated list of possible values', max_length=500, null=True)),
                ('project_settings', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.ProjectPlatformSettings')),
            ],
        ),
        migrations.AlterModelOptions(
            name='projectsearchfilter',
            options={'ordering': ['sequence']},
        ),
        migrations.AddField(
            model_name='projectsearchfilter',
            name='sequence',
            field=models.PositiveIntegerField(db_index=True, default=0, editable=False),
        ),
        migrations.AlterField(
            model_name='projectsearchfilter',
            name='project_settings',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='filters', to='projects.ProjectPlatformSettings'),
        ),
        migrations.RunPython(
            code=migrate_project_settings,
            reverse_code=dummy,
        ),
        migrations.RunPython(
            code=fix_payout_status,
            reverse_code=dummy,
        ),
        migrations.RunPython(
            code=add_group_permissions_projectdocument,
        ),
        migrations.AlterField(
            model_name='project',
            name='theme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bb_projects.ProjectTheme'),
        ),
        migrations.AlterField(
            model_name='projectdocument',
            name='file',
            field=bluebottle.utils.fields.PrivateFileField(max_length=110, upload_to=b'private/projects/documents'),
        ),
        migrations.AlterField(
            model_name='projectimage',
            name='file',
            field=models.FileField(upload_to=b'project_images/'),
        ),
        migrations.AlterModelOptions(
            name='projectplatformsettings',
            options={'verbose_name': 'project platform settings', 'verbose_name_plural': 'project platform settings'},
        ),
        migrations.AddField(
            model_name='projectplatformsettings',
            name='allow_anonymous_rewards',
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name='ProjectAddOn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_projects.projectaddon_set+', to='contenttypes.ContentType')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addons', to='projects.Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomProjectField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=5000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomProjectFieldSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('sequence', models.PositiveIntegerField(db_index=True, default=0, editable=False)),
                ('project_settings', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extra_fields', to='projects.ProjectPlatformSettings')),
            ],
            options={
                'ordering': ['sequence'],
            },
        ),
        migrations.AlterField(
            model_name='projectsearchfilter',
            name='name',
            field=models.CharField(choices=[(b'location', 'Location'), (b'theme', 'Theme'), (b'skills', 'Skill'), (b'date', 'Date'), (b'status', 'Status'), (b'type', 'Type'), (b'category', 'Category')], max_length=100),
        ),
        migrations.AddField(
            model_name='customprojectfield',
            name='field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.CustomProjectFieldSettings'),
        ),
        migrations.AddField(
            model_name='customprojectfield',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.Project', verbose_name=b'extra'),
        ),
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ['title'], 'permissions': (('approve_payout', 'Can approve payouts for projects'), ('api_read_project', 'Can view projects through the API'), ('api_add_project', 'Can add projects through the API'), ('api_change_project', 'Can change projects through the API'), ('api_delete_project', 'Can delete projects through the API'), ('api_read_own_project', 'Can view own projects through the API'), ('api_add_own_project', 'Can add own projects through the API'), ('api_change_own_project', 'Can change own projects through the API'), ('api_change_own_running_project', 'Can change own running projects through the API'), ('api_delete_own_project', 'Can delete own projects through the API'), ('api_read_projectdocument', 'Can view project documents through the API'), ('api_add_projectdocument', 'Can add project documents through the API'), ('api_change_projectdocument', 'Can change project documents through the API'), ('api_delete_projectdocument', 'Can delete project documents through the API'), ('api_read_own_projectdocument', 'Can view project own documents through the API'), ('api_add_own_projectdocument', 'Can add own project documents through the API'), ('api_change_own_projectdocument', 'Can change own project documents through the API'), ('api_delete_own_projectdocument', 'Can delete own project documents through the API'), ('api_read_projectbudgetline', 'Can view project budget lines through the API'), ('api_add_projectbudgetline', 'Can add project budget lines through the API'), ('api_change_projectbudgetline', 'Can change project budget lines through the API'), ('api_delete_projectbudgetline', 'Can delete project budget lines through the API'), ('api_read_own_projectbudgetline', 'Can view own project budget lines through the API'), ('api_add_own_projectbudgetline', 'Can add own project budget lines through the API'), ('api_change_own_projectbudgetline', 'Can change own project budget lines through the API'), ('api_delete_own_projectbudgetline', 'Can delete own project budget lines through the API')), 'verbose_name': 'project', 'verbose_name_plural': 'projects'},
        ),
        migrations.AlterField(
            model_name='projectsearchfilter',
            name='name',
            field=models.CharField(choices=[(b'location', 'Location'), (b'theme', 'Theme'), (b'skills', 'Skill'), (b'date', 'Date'), (b'status', 'Status'), (b'type', 'Type'), (b'category', 'Category')], max_length=100),
        ),
        migrations.AddField(
            model_name='project',
            name='campaign_edited',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Campaign edited'),
        ),
    ]
